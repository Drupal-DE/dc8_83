<?php

/**
 * @file
 * Contains dc_discussion.module.
 */
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\dc_relation\Entity\DiscussionRelation;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function dc_discussion_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dc_discussion module.
    case 'help.page.dc_discussion':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('DrupalCenter discussion related tweaks.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function dc_discussion_theme() {
  return [
    'dc_answer_count' => [
      'render element' => 'element',
      'template' => 'answer-count',
      'file' => 'templates/theme.inc',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_node_discussion_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get current route..
  $route = \Drupal::service('current_route_match');

  // Start new discussion.
  if ($route->getRouteName() == 'node.add') {
    // Hide field field_parent on default node.add pages.
    if (!empty($form['field_parent'])) {
      $form['field_parent']['#access'] = FALSE;
    }
  }

  // Add new discussion answer.
  if ($route->getRouteName() !== 'node.add_discussion_answer') {
    return;
  }
  /* @var $node NodeInterface */
  $node = Node::load($route->getParameter('node'));
  // Prepopulate field_parent with node id from url.
  if (!($node instanceof NodeInterface)) {
    return;
  }
  /* @var $service \Drupal\dc_discussion\DiscussionInformationInterface */
  $service = \Drupal::service('dc_discussion.discussion_information');

  $form['field_parent']['widget'][0]['target_id']['#default_value'] = $node;
  // Hide field_parent for discussion answers.
  $form['field_parent']['#access'] = FALSE;
  // Set topic.
  $form['field_topic']['widget'][0]['target_id']['#default_value'] = $service->getTopic($node);
  // Hide field_topic for discussion answers.
  $form['field_topic']['#access'] = FALSE;
  // Hide field_drupal_version for discussion answers.
  $form['field_drupal_version']['#access'] = FALSE;
  // Hide field_discussion_category for discussion answers.
  $form['field_discussion_category']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_node_discussion_discussion_answer_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Prefill fields / hide fields like we do on node.add_discussion_answer route.
  // Get current route.
  /* @var $node NodeInterface */
  if (($node = \Drupal::routeMatch()->getParameter('node')) === NULL) {
    return;
  }
  // Prepopulate field_parent with node id from url.
  if (!($node instanceof NodeInterface)) {
    return;
  }
  /* @var $service \Drupal\dc_discussion\DiscussionInformationInterface */
  $service = \Drupal::service('dc_discussion.discussion_information');

  $form['field_parent']['widget'][0]['target_id']['#default_value'] = $node;
  // Hide field_parent for discussion answers.
  $form['field_parent']['#access'] = FALSE;
  // Set topic.
  $form['field_topic']['widget'][0]['target_id']['#default_value'] = $service->getTopic($node);
  // Hide field_topic for discussion answers.
  $form['field_topic']['#access'] = FALSE;

  // Set drupal version.
  if (!empty($node->field_drupal_version->target_id)) {
    $form['field_drupal_version']['widget']['#default_value'][] = $node->field_drupal_version->target_id;
  }
  // Set discussion category.
  if (!empty($node->field_discussion_category->target_id)) {
    $form['field_discussion_category']['widget']['#default_value'][] = $node->field_discussion_category->target_id;
  }
  // Hide fields that are not relevant for user / where prefilled.
  $form['field_drupal_version']['#access'] = FALSE;
  $form['field_discussion_category']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_node_discussion_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();

  // Hide field_parent for disussion edit form.
  $form['field_parent']['#access'] = FALSE;
  // Check for filled field_parent and hide fields
  if ($node instanceof NodeInterface && ($node->hasField('field_parent') && !empty($node->field_parent->value))) {
    // Hide field_drupal_version while editing discussion answers.
    $form['field_drupal_version']['#access'] = FALSE;
    $form['field_discussion_category']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_node_discussion_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /* @var $entity NodeInterface */
  $entity = $form_state->getFormObject()->getEntity();
  /* @var $service \Drupal\dc_discussion\DiscussionInformationInterface */
  $service = \Drupal::service('dc_discussion.discussion_information');
  if (!$service->hasAnswers($entity)) {
    // No need to alter the description.
    return;
  }

  $t_args = [
    '%label' => $entity->getTitle(),
    '@count' => $service->answerCount($entity),
  ];
  $form['description']['#markup'] = '<p>' . $form['description']['#markup'] . '</p>';
  $form['description']['#markup'] .= '<p>' . t('%label has @count answers. The answers will be deleted also.', $t_args, ['context' => 'dc_discussion:form']) . '</p>';
}

/**
 * Implements hook_entity_extra_field_info().
 */
function dc_discussion_entity_extra_field_info() {
  $extra = [];
  // Add extra fields to node type discussion.
  // Add field discussion answers.
  $extra['node']['discussion']['display']['discussion_answers'] = [
    'label' => t('Discussion answers'),
    'weight' => 100,
  ];
  // Add field answer count.
  $extra['node']['discussion']['display']['answer_count'] = [
    'label' => t('Answer count'),
    'weight' => 100,
  ];

  // Add extra fields to taxonomy bundle discussion_category.
  // Add field for term children.
  $extra['taxonomy_term']['discussion_category']['display']['term_children'] = [
    'label' => t('Term children'),
    'weight' => 100,
  ];
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function dc_discussion_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ('discussion' !== $entity->bundle()) {
    return;
  }

  // Add custom fields if necessary.
  if (($answers = $display->getComponent('discussion_answers')) !== NULL) {
    // Show view discussion answers with actual node id as parent argument.
    $build['discussion_answers'] = views_embed_view('discussion_answers', 'answers', $entity->id());
    $build['discussion_answers']['#weight'] = $answers['weight'];
  }
  if (($count = $display->getComponent('answer_count')) !== NULL) {
    /* @var $service \Drupal\dc_discussion\DiscussionInformationInterface */
    $service = \Drupal::service('dc_discussion.discussion_information');

    $answer_count = $service->answerCount($entity);
    $build['answer_count'] = [
      '#count' => $answer_count,
      '#entity' => $entity,
      '#weight' => $count['weight'],
      '#theme' => 'dc_answer_count',
    ];
  }

  // Update the history table, stating that this user viewed this node.
  if (in_array($display->getOriginalMode(), ['discussion_answer'])) {
    $build['#cache']['contexts'][] = 'user.roles:authenticated';
    if (\Drupal::currentUser()->isAuthenticated()) {
      $build['#attached']['library'][] = 'history/mark-as-read';
      $build['#attached']['drupalSettings']['history']['nodesToMarkAsRead'][$entity->id()] = TRUE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function dc_discussion_taxonomy_term_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  switch ($entity->bundle()) {
    case 'discussion_category':
      if (($children = $display->getComponent('term_children')) !== NULL) {
        // Show view discussion answers with actual node id as parent argument.
        $build['term_children'] = views_embed_view('discussion_categories', 'children', $entity->id());
        $build['term_children']['#weight'] = $children['weight'];
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_taxonomy_term_discussion_category_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_color']['widget'][0]['value']['#field_prefix'] = '#';
}

/**
 * Implements hook_views_post_build().
 */
function dc_discussion_views_post_build(ViewExecutable $view) {
  $functions = [];
  $functions[] = sprintf('dc_discussion_views__%s__post_build', $view->id());
  $functions[] = sprintf('dc_discussion_views__%s_%s__post_build', $view->id(), $view->current_display);

  foreach ($functions as $callback) {
    if (!is_callable($callback)) {
      continue;
    }
    call_user_func_array($callback, [$view]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() on behalf of discussion nodes.
 */
function dc_discussion_node_presave(EntityInterface $entity) {
  if ('discussion' !== $entity->bundle()) {
    return;
  }
  /* @var $parent \Drupal\Core\Field\FieldItemListInterface */
  if (($parent = $entity->get('field_parent')) && !$parent->isEmpty()) {
    /* @var $service \Drupal\dc_discussion\DiscussionInformationInterface */
    $service = \Drupal::service('dc_discussion.discussion_information');
    /* @var $topic ContentEntityInterface */
    $topic = $service->getTopic($parent[0]->entity);
    // Set field_topic to main topic.
    $entity->field_topic->setValue($topic->id());
    // Set discussion_category to value of main topic.
    $entity->field_discussion_category->setValue($topic->field_discussion_category->getValue());
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() on behalf of discussion nodes.
 */
function dc_discussion_node_insert(EntityInterface $entity) {
  DiscussionRelation::updateOrCreateFromEntity($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() on behalf of discussion nodes.
 */
function dc_discussion_node_update(EntityInterface $entity) {
  DiscussionRelation::updateOrCreateFromEntity($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete() on behalf of discussion nodes.
 */
function dc_discussion_node_delete(EntityInterface $entity) {
  /* @var $service \Drupal\dc_discussion\DiscussionInformationInterface */
  $service = \Drupal::service('dc_discussion.discussion_information');
  $service->deleteAnswers($entity);
}

/**
 * Implements hook_views_data_alter().
 */
function dc_discussion_views_data_alter(array &$data) {
  // Provide an integration for discussion nodes.
  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type_id => $entity_type) {
    if ('node' !== $entity_type_id || !$entity_type->isSubclassOf('\Drupal\Core\Entity\ContentEntityInterface') || !$entity_type->getBaseTable()) {
      continue;
    }
    $base_table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();
    $data[$base_table]['dc_answer_count'] = [
      'title' => t('Number of answers'),
      'help' => t('The number of answers on the discussion.'),
      'field' => [
        'id' => 'node_dc_answer_count',
      ],
    ];
  }

  // Add history field.
  $data['history']['discussion_timestamp'] = [
    'title' => t('Discussion is new/updated'),
    'field' => [
      'id' => 'dc_discussion_history_timestamp',
      'real field' => 'timestamp',
      'help' => t('Show a marker if the discussion is new or updated.'),
    ],
    'filter' => [
      'id' => 'dc_discussion_history_timestamp',
      'real field' => 'timestamp',
      'help' => t('Filter for new or updated discussions.'),
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 *
 * Allow use of different form modes while using entity.form_builder getForm
 */
function dc_discussion_entity_type_alter(array &$entity_types) {
  $type_name = 'node';
  /* @var $entity_type \Drupal\Core\Entity\ContentEntityTypeInterface */
  $entity_type = $entity_types[$type_name];
  /** @var \Drupal\Core\Entity\EntityDisplayRepository[] $display_modes_list for node */
  $form_modes = \Drupal::service('entity_display.repository')->getFormModes($type_name);
  foreach ($form_modes as $machine_name => $form_display) {
    // Get the correct canonical path to add operation.
    $path = $entity_type->getLinkTemplate('canonical') . "/" . $machine_name;
    $default_handler_class = $entity_type->getHandlerClasses()['form']['default'];
    $entity_type->setFormClass($machine_name, $default_handler_class)->setLinkTemplate($machine_name, $path);
  }
}

/**
 * Implements hook_options_list_alter().
 */
function dc_ui_options_list_alter(array &$options, array $context) {
  /* @var $field_definition \Drupal\Core\Field\FieldDefinitionInterface */
  $field_definition = $context['fieldDefinition'];
  // Check if this is the field we want to change.
  if ('node.discussion.field_discussion_category' !== $field_definition->id()) {
    return;
  }

  // Rewrite options to optgroups.
  $options_new = [];
  if (isset($options['_none'])) {
    $options_new['_none'] = $options['_none'];
  }
  $group = [];
  foreach ($options as $key => $value) {
    if ('_none' === $key) {
      continue;
    }
    if (strpos($value, '-') === FALSE) {
      if (!empty($group['items'])) {
        // Add optgroup to options.
        $options_new[$group['name']] = $group['items'];
        $group = [
          'name' => '',
          'items' => [],
        ];
      }
      $group['name'] = $value;
      continue;
    }
    $group['items'][$key] = $value;
  }
  if (!empty($group['items'])) {
    $options_new[$group['name']] = $group['items'];
  }
  $options = $options_new;
}
