<?php

/**
 * @file
 * Contains dc_discussion.module.
 */
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\dc_relation\Entity\DiscussionRelation;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function dc_discussion_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dc_discussion module.
    case 'help.page.dc_discussion':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('DrupalCenter discussion related tweaks.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_node_discussion_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get current route..
  $route = \Drupal::service('current_route_match');

  // Start new discussion.
  if ($route->getRouteName() == 'node.add') {
    // Hide field field_parent on default node.add pages.
    if (!empty($form['field_parent'])) {
      $form['field_parent']['#access'] = FALSE;
    }
  }

  // Add new discussion answer.
  if ($route->getRouteName() == 'node.add_discussion_answer') {
    $node = Node::load($route->getParameter('node'));
    // Prepopulate field_parent with node id from url.
    if ($node instanceof NodeInterface) {
      $form['field_parent']['widget'][0]['target_id']['#default_value'] = $node;
      // Hide field_parent for discussion answers.
      $form['field_parent']['#access'] = FALSE;
      // Hide field_drupal_version for discussion answers.
      $form['field_drupal_version']['#access'] = FALSE;
      // Hide field_discussion_category for discussion answers.
      $form['field_discussion_category']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_node_discussion_discussion_answer_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Prefill fields / hide fields like we do on node.add_discussion_answer route.
  // Get current route..
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Prepopulate field_parent with node id from url.
    if ($node instanceof NodeInterface) {
      $form['field_parent']['widget'][0]['target_id']['#default_value'] = $node;
      // Hide field_parent for discussion answers.
      $form['field_parent']['#access'] = FALSE;
      // Set drupal version.
      if (!empty($node->field_drupal_version->target_id)) {
        $form['field_drupal_version']['widget']['#default_value'][] = $node->field_drupal_version->target_id;
      }
      // Set discussion category.
      if (!empty($node->field_discussion_category->target_id)) {
        $form['field_discussion_category']['widget']['#default_value'][] = $node->field_discussion_category->target_id;
      }
      // Hide fields that are not relevant for user / where prefilled.
      $form['field_drupal_version']['#access'] = FALSE;
      $form['field_discussion_category']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_node_discussion_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();

  // Hide field_parent for disussion edit form.
  $form['field_parent']['#access'] = FALSE;
  // Check for filled field_parent and hide fields
  if ($node instanceof NodeInterface && ($node->hasField('field_parent') && !empty($node->field_parent->value))) {
    // Hide field_drupal_version while editing discussion answers.
    $form['field_drupal_version']['#access'] = FALSE;
    $form['field_discussion_category']['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function dc_discussion_entity_extra_field_info() {
  $extra = [];
  // Add extra fields to node type discussion.
  // Add field discussion answers.
  $extra['node']['discussion']['display']['discussion_answers'] = [
    'label' => t('Discussion answers'),
    'weight' => 100,
  ];
  // Add field answer count.
  $extra['node']['discussion']['display']['answer_count'] = [
    'label' => t('Answer count'),
    'weight' => 100,
  ];

  // Add extra fields to taxonomy bundle discussion_category.
  // Add field for term children.
  $extra['taxonomy_term']['discussion_category']['display']['term_children'] = [
    'label' => t('Term children'),
    'weight' => 100,
  ];
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function dc_discussion_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  switch ($entity->bundle()) {
    case 'discussion':
      if (($answers = $display->getComponent('discussion_answers')) !== NULL) {
        // Show view discussion answers with actual node id as parent argument.
        $build['discussion_answers'] = views_embed_view('discussion_answers', 'answers', $entity->id());
        $build['discussion_answers']['#weight'] = $answers['weight'];
      }
      if (($count = $display->getComponent('answer_count')) !== NULL) {
        $answers = _dc_discussion_discussion_get_answers($entity->id());
        $build['answer_count'] = [
          '#markup' => $answers,
          '#weight' => $count['weight'],
        ];
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function dc_discussion_taxonomy_term_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  switch ($entity->bundle()) {
    case 'discussion_category':
      if (($children = $display->getComponent('term_children')) !== NULL) {
        // Show view discussion answers with actual node id as parent argument.
        $build['term_children'] = views_embed_view('discussion_categories', 'children', $entity->id());
        $build['term_children']['#weight'] = $children['weight'];
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_discussion_form_taxonomy_term_discussion_category_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_color']['widget'][0]['value']['#field_prefix'] = '#';
}

/**
 * Helper function to get all answers (as flat list) for a single discussion.
 *
 * @todo: implement as cachable service?
 *
 * @param int $id
 *   Entity ID.
 *
 * @return int[]
 *   List of discussion answer IDs.
 */
function _dc_discussion_discussion_get_answers($id) {
  $query = Database::getConnection()->select('node__field_topic', 'p');
  $query->condition('field_topic_target_id', $id);

  return $query->countQuery()->execute()->fetchField();
}

/**
 * Implements hook_views_post_build().
 */
function dc_discussion_views_post_build(ViewExecutable $view) {
  $functions = [];
  $functions[] = sprintf('dc_discussion_views__%s__post_build', $view->id());
  $functions[] = sprintf('dc_discussion_views__%s_%s__post_build', $view->id(), $view->current_display);

  foreach ($functions as $callback) {
    if (!is_callable($callback)) {
      continue;
    }
    call_user_func_array($callback, [$view]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() on behalf of discussion nodes.
 */
function dc_discussion_node_presave(EntityInterface $entity) {
  if ('discussion' !== $entity->bundle()) {
    return;
  }
  /* @var $parent \Drupal\Core\Field\FieldItemListInterface */
  if (($parent = $entity->get('field_parent')) && !$parent->isEmpty()) {
    // Node is discussion answer.
    /* @var $service \Drupal\discussion_relation\RelationInformationInterface */
    $service = \Drupal::service('dc_relation.relation_information');
    if ($topic = $service->getTopic($entity)) {
      // Set field_topic to main topic.
      $entity->field_topic->setValue($topic->id());
      // Set discussion_category to value of main topic.
      $entity->field_discussion_category->setValue($topic->field_discussion_category->getValue());
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() on behalf of discussion nodes.
 */
function dc_discussion_node_insert(EntityInterface $entity) {
  DiscussionRelation::updateOrCreateFromEntity($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() on behalf of discussion nodes.
 */
function dc_discussion_node_update(EntityInterface $entity) {
  DiscussionRelation::updateOrCreateFromEntity($entity);
}

/**
 * Helper function to get the main topic of a discussion.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Discussion node to get the topic for.
 */
function _dc_discussion_discussion_get_topic($entity) {
  /* @var $parent \Drupal\Core\Field\FieldItemListInterface */
  while ($entity && ($parent = $entity->get('field_parent')) !== NULL && !$parent->isEmpty()) {
    try {
      $item = $parent->get(0);
      $value = $item->getValue();
      $entity = Drupal::entityTypeManager()->getStorage('node')->load($value['target_id']);
    }
    catch (Exception $exc) {
      $entity = FALSE;
    }
  }
  return $entity;
}

/**
 * Implements hook_views_data_alter().
 */
function dc_discussion_views_data_alter(array &$data) {
  // Provide an integration for discussion nodes.
  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type_id => $entity_type) {
    if ('node' !== $entity_type_id || !$entity_type->isSubclassOf('\Drupal\Core\Entity\ContentEntityInterface') || !$entity_type->getBaseTable()) {
      continue;
    }
    $base_table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();
    $data[$base_table]['dc_answer_count'] = [
      'title' => t('Number of answers'),
      'help' => t('The number of answers on the discussion.'),
      'field' => [
        'id' => 'node_dc_answer_count',
      ],
    ];
  }

  // Add history field.
  $data['history']['discussion_timestamp'] = [
    'title' => t('Discussion is new/updated'),
    'field' => [
      'id' => 'dc_discussion_history_timestamp',
      'real field' => 'timestamp',
      'help' => t('Show a marker if the discussion is new or updated.'),
    ],
    'filter' => [
      'id' => 'dc_discussion_history_timestamp',
      'real field' => 'timestamp',
      'help' => t('Filter for new or updated discussions.'),
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 *
 * Allow use of different form modes while using entity.form_builder getForm
 */
function dc_discussion_entity_type_alter(array &$entity_types) {
  $entity_type = 'node';
  $entity = $entity_types[$entity_type];
  /** @var \Drupal\Core\Entity\EntityDisplayRepository[] $display_modes_list for node */
  $form_modes = \Drupal::service('entity_display.repository')->getFormModes($entity_type);
  foreach ($form_modes as $machine_name => $form_display) {
    // Get the correct canonical path to add operation.
    $path = $entity->getLinkTemplate('canonical') . "/" . $machine_name;
    $default_handler_class = $entity->getHandlerClasses()['form']['default'];
    $entity->setFormClass($machine_name, $default_handler_class)->setLinkTemplate($machine_name, $path);
  }
}
