<?php

/**
 * @file
 * The primary PHP file for the DrupalCenter v8 sub theme of the UIkitty base theme.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\user\Entity\User;

/**
 * Override variables used in page.html.twig.
 */
function dc_preprocess_page(&$vars) {
  $site_config = \Drupal::config('system.site');
  $vars['site_name'] = $site_config->get('name');
  $vars['site_slogan'] = $site_config->get('slogan');
}

/**
 * Override variables used in page.html.twig.
 */
function dc_preprocess_node(&$vars) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $vars['node'];
  // Add author_picture
  $vars['author_picture'] = user_view($node->getOwner(), 'compact');
}

/**
 * Override variables used in views-view-unformatted--discussion-categories.html.twig.
 */
function dc_preprocess_views_view_unformatted__discussion_categories(&$vars) {
  foreach ($vars['rows'] as $delta => $row) {
    /* @var $item \Drupal\views\ResultRow */
    $item = $row['content']['#row'];
    if (!$item->_entity->hasField('field_color')) {
      continue;
    }
    $color = $item->_entity->field_color->getValue();
    if (empty($color[0]['value'])) {
      // Try to load color from parent term.
      /* @var $storage \Drupal\taxonomy\TermStorage */
      $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
      $parents = $storage->loadParents($item->_entity->id());
      if (!empty($parents)) {
        $parent = reset($parents);
        $color = $parent->field_color->getValue();
      }
    }
    $color_code = isset($color[0]['value']) ? '#' . $color[0]['value'] : 'transparent';
    $vars['rows'][$delta]['attributes']->setAttribute('style', sprintf('border-left-color: %s;', $color_code));
  }
}

/**
 * Implements hook_theme_suggestion_HOOK_alter().
 *
 * @param array $suggestions
 *   Existing suggestions.
 * @param array $vars
 *   Additional variables.
 */
function dc_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $vars) {
  $elements = $vars['elements'];

  $suggestions[] = 'taxonomy_term__' . $elements['#view_mode'];
  $suggestions[] = 'taxonomy_term__' . $elements['#taxonomy_term']->bundle() . '__' . $elements['#view_mode'];
}

/**
 * Implements hook_preprocess_block().
 */
function dc_preprocess_block(&$variables) {
  if(!empty($variables['attributes']['id'])) {
    $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  }
  // Get user image for use in header menu block.
  if(isset($variables['elements']['#id']) && $variables['elements']['#id'] == "header_user_menu") {
    // Get current user and render in user preview image view mode.
    $userCurrent = \Drupal::currentUser();
    $user = User::load($userCurrent->id());
    $view_builder = \Drupal::entityManager()->getViewBuilder('user');
    $variables['user_picture'] = $view_builder->view($user, 'image_round');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dc_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dc_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dc_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  if (isset($variables['style_name'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['style_name'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dc_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['#view_mode'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['elements']['#view_mode'];
  }
}

/**
 * Implements hook_js_alter().
 */
function dc_js_alter(&$javascript, AttachedAssetsInterface $assets) {
  // Move jquery to header - otherwise uikit3 is not working correctly
  if (isset($javascript['core/assets/vendor/jquery/jquery.min.js'])) {
    $javascript['core/assets/vendor/jquery/jquery.min.js']['scope'] = 'header';
    $javascript['core/assets/vendor/jquery/jquery.min.js']['weight'] = -20;
  }
}
